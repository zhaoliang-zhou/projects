{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Percolation Project Final FINAL Project ******* ","provenance":[{"file_id":"18bwsrWQuzEJ9iZ9wDfY0yHU3i0rroi8x","timestamp":1588729794732},{"file_id":"1MRpV3iyiTYyjlDUr-6emseCjBNkW1SW4","timestamp":1588289136484},{"file_id":"1Ujlp2hfds5kObXE_2cR6OnNl6SAiaq_s","timestamp":1556061357506},{"file_id":"1vAygtdwetxeBJvxtxHTokn4Ngu4PF3BA","timestamp":1555951578899},{"file_id":"1blp11ycnyOoK7tprPABGn0jc0tK82Cq0","timestamp":1555692454394},{"file_id":"1entOyEuy4W9qTDU6FA26NtLOyCtqAdJF","timestamp":1555679453751},{"file_id":"1C1NG6Zb_WxtvpUZhc_oVHwej8Ko2yiE-","timestamp":1555523257885}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XCXN1cWqc-pp","colab_type":"text"},"source":["_This notebook is from Math 242 A, in class on April 22, 2019._"]},{"cell_type":"markdown","metadata":{"id":"6MlG9b0_v3C4","colab_type":"text"},"source":["# Percolation: Recursive Depth-First Search\n","\n","Consider a $n \\times n$ grid of squares. Each square is either \"open\" with probability $p$ or \"closed\" with probability $1-p$. A liquid is poured on the top of the grid. What is the probability that the liquid will be able to flow from the top of the grid to the bottom through a path of open squares? "]},{"cell_type":"markdown","metadata":{"id":"lTnm-8qYwVwz","colab_type":"text"},"source":["## Setup"]},{"cell_type":"markdown","metadata":{"id":"l8vLRra9wuhm","colab_type":"text"},"source":["Import some necessary modules:"]},{"cell_type":"code","metadata":{"id":"vAu9ph83vwiu","colab_type":"code","colab":{}},"source":["import random\n","import math\n","import numpy\n","from matplotlib import pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MHFcAHl9w2Z3","colab_type":"text"},"source":["Define variables:\n","\n","* `n`: the number of rows and columns in the grid\n","* `p`: probability that a square is \"open\""]},{"cell_type":"code","metadata":{"id":"DGu3cliWxIxe","colab_type":"code","colab":{}},"source":["n = 10\n","p = 0.7"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"35ha-LIAxdIL","colab_type":"text"},"source":["Define a data structure for the $n \\times n$ grid. Here, we use a numpy 2D array, each entry of which is either 0 or 1. Suppose that 0 represents an open square  and 1 represents a closed square. We fill the grid so that each square is open with probability $p$. Here is one way to do it:"]},{"cell_type":"code","metadata":{"id":"ZPA9xN4Amfj4","colab_type":"code","outputId":"3092263d-6d25-4189-ffa5-a76a39f81120","executionInfo":{"status":"ok","timestamp":1589434697687,"user_tz":360,"elapsed":723,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":187}},"source":["# use numpy to generate a matrix of random numbers between 0 and 1, then convert to either 0 or 1\n","grid = (numpy.random.rand(n, n) > p).astype(int)\n","grid"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0, 0, 0, 1, 0, 0, 0, 1, 0, 0],\n","       [1, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0],\n","       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n","       [0, 0, 1, 1, 1, 0, 0, 1, 0, 0],\n","       [0, 0, 0, 1, 0, 0, 0, 1, 1, 1],\n","       [1, 1, 1, 1, 0, 1, 0, 1, 0, 1],\n","       [1, 1, 1, 0, 0, 1, 1, 0, 1, 1],\n","       [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0, 0, 1, 0, 0, 1]])"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"hM2lGTTjx1pF","colab_type":"text"},"source":["Now we need to determine whether there exists a path of open cells from the top to the bottom of the grid.\n","\n","_How should we do this? What sort of algorithm would work best?_"]},{"cell_type":"markdown","metadata":{"id":"ECQn4VhlwXho","colab_type":"text"},"source":["## Depth-First Search\n","\n","We will use a depth-first search (DFS) algorithm to determine whether there is an open path from the top of the grid to the bottom. One way to implement this algorithm is to write a recursive function. We will build up to this function in several steps."]},{"cell_type":"markdown","metadata":{"id":"IB7Y2zHHwvq8","colab_type":"text"},"source":["__Warm-up:__ Write a recursive function called `search()` that traverses a single column of the grid from top to bottom. "]},{"cell_type":"code","metadata":{"id":"1ZhyKX25id2u","colab_type":"code","outputId":"76366ca6-a23b-4a0a-f205-dc42468a5518","executionInfo":{"status":"ok","timestamp":1589434697689,"user_tz":360,"elapsed":691,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":357}},"source":["def search(row):\n","  print(\"searching row \", row)\n","  #search the next square\n","  if row + 1 < n:\n","    search(row + 1) #run the function and does that unil row + 1 = n since not true anymore and does back down. Showing us how recursion works. \n","  print(\"finished searching row \", row)\n","  \n","search(0)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["searching row  0\n","searching row  1\n","searching row  2\n","searching row  3\n","searching row  4\n","searching row  5\n","searching row  6\n","searching row  7\n","searching row  8\n","searching row  9\n","finished searching row  9\n","finished searching row  8\n","finished searching row  7\n","finished searching row  6\n","finished searching row  5\n","finished searching row  4\n","finished searching row  3\n","finished searching row  2\n","finished searching row  1\n","finished searching row  0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EPgUe6O4w6cO","colab_type":"text"},"source":["__Next:__ Modify your function so that it also searches all neighboring squares that haven't been searched yet. This will require keeping track of which squares have been searched. For now, don't worry about which squares are open or closed."]},{"cell_type":"code","metadata":{"id":"DmF6oY4RxSRw","colab_type":"code","colab":{}},"source":["########## CODE FROM MATH 242A ##########\n","\n","# define an exception that will be raised if percolation occurs\n","class percolationFound(Exception): \n","  pass\n","\n","# matrix to indicate which squares have been searched\n","\n","# define the search function\n","def search0 (row, col,n, p): #Search each row going down. \n","  #print(\"searching row \", row, \" and column \", col)\n","  visited[row,col] = 1 # Sets all of the 0's as ones when they have been visited.  \n","  \n","  # if we are at the bottom row, then stop\n","  if row == n-1: # This case is only true when at the bottom!!!!!! :O :O \n","    raise percolationFound  # raise an exception to indicate that percolation has been found. \n","  elif visited[row + 1, col] == 0 and grid[row + 1, col] == 0: # then search down\n","    search0(row + 1, col,n,p)\n","  \n","  # search left\n","  if col > 0 and visited[row, col-1] == 0 and grid[row, col-1] == 0: # Would mean that you are in column 1 or column 1 + column. \n","    search0(row, col - 1,n,p) # going backwards on the row. If you haven't searched the left and it's 0 , then we try going left. \n","  \n","  # search right\n","  if col < n-1 and visited[row, col+1] == 0 and grid[row, col+1] == 0: # If your column and row to the right is open, then you can move. col < n - 1 there because don't want to ggo out of bounds. \n","    search0(row, col + 1,n,p) #call the function again. \n","  \n","  # search up\n","  if row > 0 and visited[row-1, col] == 0 and grid[row-1, col] == 0: # go up a row and stay in the same column if open space above you and you haven't been there yet. (Code saying after row >0: Don't go where you've been before, don't go to 1's)\n","    search0(row - 1, col,n,p) \n","\n","  #print(\"finished searching row \", row, \" and column \", col)\n","\n","# define a function to start searching at each cell in the top row\n","\n","def findPercolation0(n,p): # Find the path to the bottom. \n","  # matrix to indicate which squares have been searched\n","  global visited # Works for every function. \n","  visited = numpy.zeros((n,n))  # 0 indicates not yet visited #Looks for next row before looking at the columns. Turns the zero to a 1 if you've been there. \n","  global grid\n","  grid = (numpy.random.rand(n, n) > p).astype(int)\n","  #print(grid)\n","#try except block \n","  try: #starts different searches in present location. Start another seach until you get a path. \n","    for i in range(n): # i is interpeted as a column, but in the code it's just a number. \n","      #if the top cell in column i is open and not visited, start searching there\n","      if grid[0,i] == 0 and visited[0,i] == 0: #has not been visited let. Not searched for yet. \n","        search0(0,i,n,p) #If it's open and hasn't been visited yet, call the search function. \n","  except percolationFound:\n","    #print(\"percolation found!\")\n","    return True  # percolation found\n","  else:\n","    #print(\"no percolation.\")\n","    return False # percolation not found\n","  \n","  "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rKc5uFfv-1Vn","colab_type":"text"},"source":["Try it out:"]},{"cell_type":"code","metadata":{"id":"bKPdAy9z-2Yk","colab_type":"code","outputId":"b54d255a-c02d-4d1f-fc51-11f03b468ab4","executionInfo":{"status":"ok","timestamp":1589434697691,"user_tz":360,"elapsed":667,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["\n","lista = [findPercolation0(10,0.1) for _ in range(1000)]\n","print(lista)\n","a = sum(lista)/1000\n","print(a)\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]\n","0.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zJWTI1mh3UZl","colab_type":"code","outputId":"6fe9a8d6-1268-4854-f64b-d5cec48e94d9","executionInfo":{"status":"ok","timestamp":1589434697995,"user_tz":360,"elapsed":953,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["listb = [findPercolation0(10,0.2) for _ in range(1000)]\n","print(listb)\n","b = sum(listb)/1000\n","print(b)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]\n","0.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dBQ0A-0myjq5","colab_type":"code","outputId":"3a4cde95-7936-4001-c369-66fa2e933b65","executionInfo":{"status":"ok","timestamp":1589434697997,"user_tz":360,"elapsed":940,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["L = [a,b]\n","print(L)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["[0.0, 0.0]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lFHViQUb5QHS","colab_type":"code","colab":{}},"source":["pvals = [0.1, 0.2, 0.3]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1GUL1Uhp6JCf","colab_type":"code","outputId":"383ae278-d50c-4327-f831-bc69e34c8537","executionInfo":{"status":"ok","timestamp":1589434698149,"user_tz":360,"elapsed":1067,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["def frange(start, stop, step):\n","     i = start\n","     while i < stop:\n","         yield i\n","         i += step\n","\n","listK = []\n","for p in frange(0,1,0.1): \n","  k = [findPercolation0(10,p) for _ in range(1000)]\n","  perc = sum(k)/1000\n","  listK.append(perc)\n","print(listK)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["[0.0, 0.0, 0.0, 0.0, 0.022, 0.155, 0.577, 0.915, 0.996, 1.0, 1.0]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sqww1gxsmjkf","colab_type":"text"},"source":["**1. How does the probability of percolation depend on p when n = 10? Find the probability of percolation for various values of p. Make a plot showing how the probability of percolation depends on p.**\n","\n","**Note to myself: -Simmulate 1000 times. Returning Number of perculations/ number of trials. Use n as an imput value.**\n","\n","**-If true store as zeros, if false store as ones and then sum all of them up to get the percentage. Like old hw assignment.**"]},{"cell_type":"code","metadata":{"id":"ps3oEFAwmad5","colab_type":"code","outputId":"71ee1db7-2a7d-4955-8566-32f20a761d8c","executionInfo":{"status":"ok","timestamp":1589434698755,"user_tz":360,"elapsed":1659,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":312}},"source":["#Do: Loop and store true or false values. \n","\n","#for probability of perculation \n","  #for i range (1,10): number of probabilities \n","    #p = i/10\n","      #for each grid, store findPercolation(n,p)   #finding a bunch of grids for each p. \n","  #percolationFound\n","  #count store trues as 1 within a list and falses as 0, sum them up. \n","#counts/ divided by number of grids to get a perfectage for each p. \n","\n","\n","#New Code:\n","def ProbabilityOfPerc(n):\n","\n","  NumberOfPercPerP = numpy.zeros(9)\n","  numberoftrials = 1000\n","  for i in range (1,10):\n","    p = i/10 \n","    for j in range (numberoftrials):\n","      grid = (numpy.random.rand(n, n) > p).astype(int)\n","      x = findPercolation0(n, p) #have a path or you don't \n","      NumberOfPercPerP[i-1] = NumberOfPercPerP[i-1] + int(x) #only add 1 if true to the previous percolation true count.  #To print this do print(NumberOfPercPerP)\n","  PercentageOfPercPerP = NumberOfPercPerP/numberoftrials\n","  #print(PercentageOfPercPerP) #When p = 0.1, then we have a 0% chance of getting to the bottom.\n","  return PercentageOfPercPerP\n","\n","PercentageOfPercPerP = ProbabilityOfPerc(10)\n","\n","#Graph of #1: \n","plt.plot(numpy.linspace(.1,.9, 9), PercentageOfPercPerP, \".\") \n","plt.xlabel(\"values of P\")\n","plt.ylabel(\"Percectage of Perculations Per P\")\n","\n","plt.title(\"Probability of Perulations Per P\")"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Probability of Perulations Per P')"]},"metadata":{"tags":[]},"execution_count":12},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"2o5ViIkQlyY6","colab_type":"text"},"source":["**2. How does the probability of percolation depend on p when n = 40? Find the probability of percolation for various values of p. Make a plot showing how this probability depends on p.**"]},{"cell_type":"code","metadata":{"id":"fPWDnSEXnBAc","colab_type":"code","outputId":"3c6177ee-e6c1-4b4b-f8a2-50e00fb0ee4d","executionInfo":{"status":"ok","timestamp":1589434701199,"user_tz":360,"elapsed":4079,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":312}},"source":["n = 40\n","\n","PercentageOfPercPerP = ProbabilityOfPerc(n)\n","\n","#Graph of #2: \n","plt.plot(numpy.linspace(.1,.9, 9), PercentageOfPercPerP, \".\") \n","plt.xlabel(\"values of P\")\n","plt.ylabel(\"Percectage of Perculations Per P\")\n","\n","plt.title(\"Probability of Perulations Per P\")"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Probability of Perulations Per P')"]},"metadata":{"tags":[]},"execution_count":13},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"nxqa_EpDlnMj","colab_type":"text"},"source":["Note to Myself: Because the graphs aren;t changing by much, it tells us that the n doesn't have a big effect on the probaibility of perculations per P. "]},{"cell_type":"markdown","metadata":{"id":"PcLpHeSXmpyu","colab_type":"text"},"source":["**3. How does the probability of percolation depend on n when p = 0.55? Find the probability of percolation for various values of n. Make a plot showing how this probability depends on n.**\n","\n","**Notes: Def fuction that defines n and p as a certain value. For #1 and #2 we are doing p from 0 to 1 and for #3 and #4 n is going from 1 to 100....**\n","\n","**when n = 100 it might run for long period of time.**\n"]},{"cell_type":"code","metadata":{"id":"J1LbOtU8nArO","colab_type":"code","outputId":"64b2dd6c-6ed6-40dc-844a-2fbb09055ad4","executionInfo":{"status":"ok","timestamp":1589434702859,"user_tz":360,"elapsed":5712,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":329}},"source":["#changing n and keeping p constant. One p and diff n's. \n","def ProbabilityOfPercChange(p):\n","\n","  NumberOfNValue = numpy.zeros(4)\n","  numberoftrials = 1000\n","  for i in range (10,50,10): #Step of 10 here\n","    n = i\n","    for j in range(numberoftrials):\n","      x = findPercolation0(n,p) #have a path or you don't \n","      NumberOfNValue[int(i/10)-1] = NumberOfNValue[int(i/10)-1] + int(x) #only add 1 if true to the previous percolation true count. #To print this do print(NumberOfNValue). X returns a boulium true or false +1 or 0. \n","  #print(NumberOfNValue)\n","  PercentageOfPercPerP = NumberOfNValue/numberoftrials\n","  print(PercentageOfPercPerP) #When p = 0.1, then we have a 0% chance of getting to the bottom. \n","  return PercentageOfPercPerP\n","\n","PercentageOfPercPerP = ProbabilityOfPercChange(0.55)\n","\n","#Graph of #3: \n","plt.plot(numpy.arange(10, 50, 10), PercentageOfPercPerP, \".\") \n","plt.xlabel(\"n values\") #represents matrix sizes \n","plt.ylabel(\"Percentage of Perculations Per n\")\n","\n","plt.title(\"Probability of Perulations depending on n\")\n"],"execution_count":14,"outputs":[{"output_type":"stream","text":["[0.339 0.225 0.142 0.108]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Probability of Perulations depending on n')"]},"metadata":{"tags":[]},"execution_count":14},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"NlVfKXsbm3IP","colab_type":"text"},"source":["**4. How does the probability of percolation depend on n when p = 0.65? Find the probability of percolation for various values of n. Make a plot showing how this probability depends on n.**\n","\n","**Note: If you experience a “maximum recursion depth exceeded” error, try running the following code: import sys sys.setrecursionlimit(4000)**\n","\n","**If necessary, replace 4000 with a larger number in the code above.**"]},{"cell_type":"markdown","metadata":{"id":"XoGzDNa2rkx3","colab_type":"text"},"source":["Note to Myself: When the spaces have a 65% of the space should be open, these are the probabilities of it making it down with different n values. "]},{"cell_type":"code","metadata":{"id":"-EgokUuwnALq","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":329},"outputId":"31e473ea-cea1-4cfb-87e0-0f528088503e","executionInfo":{"status":"ok","timestamp":1589434703997,"user_tz":360,"elapsed":6820,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}}},"source":["PercentageOfPercPerP = ProbabilityOfPercChange(0.65)\n","\n","#Graph of #4: \n","plt.plot(numpy.arange(10, 50, 10), PercentageOfPercPerP, \".\") \n","plt.xlabel(\"n values\") #represents matrix sizes \n","plt.ylabel(\"Percentage of Perculations Per n\")\n","\n","plt.title(\"Probability of Perulations depending on n\")"],"execution_count":15,"outputs":[{"output_type":"stream","text":["[0.755 0.855 0.915 0.961]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Probability of Perulations depending on n')"]},"metadata":{"tags":[]},"execution_count":15},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"4XuhUFZpu6gT","colab_type":"text"},"source":["Note to Myself: P = 0.60 is a very unstable point and the graph varies a lot!!!!!!!!"]},{"cell_type":"markdown","metadata":{"id":"NuWq1bthj_D_","colab_type":"text"},"source":["**Conclussion:**\n","I seems that when p is equal to 0.60, the percentage of perculations per n were all over the place unlike other values of p such as 0.65 or 0.55. However, what is very interesting is that when p changes by a value of .10, it does an inverse slope (complete opposite). Also it seemed from my computations that different n values don't have a huge affect on the percentage of perculations per p. "]},{"cell_type":"markdown","metadata":{"id":"ZxHapIhmltsP","colab_type":"text"},"source":["**Further Explorations:** \n","I would like to run more values of n and p to see what happens. Some problems I ran into was making the code run. Honestly this was a fun project. That's about it honestly.  "]}]}